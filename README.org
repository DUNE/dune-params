#+TITLE: A System for Managing DUNE Parameters
#+AUTHOR: Brett Viren

* What is this?

The =dune-params= package provides the Python module =dune.params= and a command line interface program called =dune-params=.  It provides a way to organize a set of fundamental parameters maintained in a spread sheet (following a particular schema) and derived parameters implemented as simple python code in order to generate output reports driven by (jinja2) templates.

More information can be found in the [[./doc/manual.org][dune-params manual]].

* Installation

The =dune-params= package is available from PyPI and so it is very easy to install.  There are many ways to do this but it is recommended to install to a [[https://virtualenv.pypa.io/][virtualenv]].

#+BEGIN_EXAMPLE
  $ virtualenv venv
  $ source venv/bin/activate
  $ pip install dune-params
  $ dune-params 
#+END_EXAMPLE

* Usage

See the [[./doc/manual.org][manual]] to understand how =dune-params= works.  It can be used as a Python module or through its command line interface.

#+BEGIN_EXAMPLE
  $ dune-params render [-r renderer] [-f my.filter.module.function] -t mytemplate -o myreport myparams.xls
#+END_EXAMPLE

* Development

You may supply new render or filter modules of your own without needing to modify =dune-params= directly.  These module codes simply need to be accessible in the usual Python path.

If you wish to develop =dune-params= directly, here is how to prepare a development environment.  Again, it's recommended that you work in a virtualenv.  

#+BEGIN_EXAMPLE
  $ virtualenv venv
  $ source venv/bin/activate
  $ git clone git remote add origin git@github.com:DUNE/dune-params.git
  $ cd dune-params
  $ python setup.py sdist
  $ pip install --upgrade dist/dune-params-X.Y.Z.tar.gz
  $ dune-params [...]
#+END_EXAMPLE

As you edit the code, repeat the =pip install= command.


* Specifications

For the DUNE TDR we are extending DUNE Params to handle
"specifications" (specs).  These are sometimes called "requirements"
and other things.  For the purpose here they are a brief statement of
some quantity or quality of some aspect of the DUNE experiment which
must be met along with organizational metadata, identifiers, comments,
notes, etc.

A spec is provided as a row in a "system spec spreadsheet" (SSS).  An
SSS is composed of columns each following a format and semantic
interpretation.  Multiple SSS may be aggregated into one workbook (eg,
one ~.xlsx~ file).  An SSS is identified by a brief label which must
be unique across all DUNE spec systems after any non-alphabetical
characters are removed and the result is mapped to one case.

The columns of an SSS are described as they should be entered into the
source SSS below.  The first term in each description gives the
expected data type for the cell.  

- integer :: an integral number
- alphabet :: consisting only of the 26 characters from the English alphabet (no space, punctuations)
- text :: any valid LaTeX text, see comments below
- enum :: a choice from a fixed menu

Comments on LaTeX:

- any quantity with a unit must be expressed using ~siunitx~, ie ~\SI{4.7}{\milli\meter}~ or ~\SI{4.7}{\mm}~.
- math mode must be made explicit.  Ie, enter ~$\pm \SI{0.5}{\mm}$~.

Column definitions

- order :: integer, a non-negative integer identifier (ID) unique
           across all rows in one SSS.  Rows may be reordered within
           one SSS but this ID must remain associated with the other
           entries in the row.  Gaps in numbering are allowed and
           indeed if a spec is deleted its order number should not be
           reused.  Setting an order number to an illegal value will
           be interpreted as deletion while retaining the row in the
           SSS.

- label :: alphabet, a lower-case, alphabetical identifier unique to
           all rows in the SSS.  This should be short but evoke the
           meaning of the spec.  Along with the SSS label it is used
           to uniquely identify a spec in various contexts across the
           entire set of specs.

- field :: enum, the field of study from which the spec derives
           (~scientific~, ~engineering~).

- title :: text, succinctly define the subject of the spec.  When
           discussing this spec in the text or among peers assume you
           will repeat these words verbatim one thousand times.
           Quantitative qualifiers such as "minimum" should be omitted
           (they will be provided in "requirement").  Any identifiers
           pertaining to the system in which the spec resides should
           be omitted.

- requirements :: text, succinctly state, preferably only using a
                  quantitative statement and not verbiage, the
                  requirement this spec states.  Do use inequalities
                  to imply a max/min quantities or plus/minus to
                  indicate a tolerance.  Do use ~\SI{xxx}{unit}~ for
                  correct units.  Do use latex.  Do *NOT* use Unicode
                  or other non-ASCII glyphs.

- goal :: text, a value of the spec which may be expected.  

- explanation :: text, any description, reasoning or justification for
                 the choice of the value in the requirement cell.

- notes :: text, any additional commentary on the spec

- data :: text, any data oriented validation, and particularly any
          from protoDUNE, for the requirement value.

- sim :: text, any simulation or calculation oriented validation for
         the requirement value.

